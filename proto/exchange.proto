syntax = "proto3";
package rpc_crypto;
import "google/api/annotations.proto";

/**
 * Cryptocurrency exchange management
 */
service Exchange {
    // Return an array of supported exchange IDs
    rpc getExchangeIDs (Empty) returns (ExchangeIDs) {
        option (google.api.http) = { get: "/exchange_ids" };
    }

    // Return the metadata for a given exchange
    rpc getExchangeInfo (getExchangeInfoRequest) returns (ExchangeInfo) {
        option (google.api.http) = { get: "/exchange/{id}" };
    }

    // Stream all the metadata for all supported exchanges
    rpc listExchanges (Empty) returns (stream ExchangeInfo) {
        option (google.api.http) = { get: "/exchanges" };
    }

    // Add a connection for an exchange
    rpc addExchange (AddExchangeRequest) returns (AddExchangeResponse) {
        option (google.api.http) = {
            post: "/exchanges"
            body: "*"
        };
    }

    // Return the supported trade pairs for the exchange
    rpc getTradePairs (getTradePairsRequest) returns (stream TradePairInfo) {
        option (google.api.http) = {
            get: "/products/{exchangeHandle}"
        };
    }

    // Return the latest ticket for the given exchange and trade pair
    rpc getTicker (getTickerRequest) returns (Ticker) {
        option (google.api.http) = {
            get: "/ticker/{exchangeHandle}"
        };
    }
}

message Empty {
}

message getExchangeInfoRequest {
    string id = 1;
}

message ExchangeIDs {
    repeated string id = 1;
}

message ExchangeInfo {
    string id = 1; // lowercase string identifier
    string name = 2; // human-readable string
    repeated string countries = 3; // A string literal or an array of string literals of 2-symbol ISO country codes, where the exchange is operating from
    ExchangeCapabilities capabilities = 4; // exchange features
    ExchangeURLs urls = 5; // exchange URL details
    string version = 6; // A string literal containing version identifier for current exchange API.
    RequiredCredentials required_credentials = 7; // a boolean map of required credentials for full API access
}

message ExchangeCapabilities {
    bool cors = 1;
    bool public_api = 2;
    bool private_api = 3;
    bool cancel_order = 4;
    bool create_deposit_address = 5;
    bool create_order = 6;
    bool deposit = 7;
    bool fetch_balance = 8;
    bool fetch_closed_orders = 9;
    bool fetch_currencies = 10;
    bool fetch_deposit_address = 11;
    bool fetch_markets = 12;
    bool fetch_my_trades = 13;
    bool fetch_ohlcv = 14;
    bool fetch_open_orders = 15;
    bool fetch_order = 16;
    bool fetch_order_book = 17;
    bool fetch_orders = 18;
    bool fetch_ticker = 19;
    bool fetch_tickers = 20;
    bool fetch_bids_asks = 21;
    bool fetch_trades = 22;
    bool withdraw = 23;
}

message ExchangeURLs {
    string www = 1; // The main HTTP website URL.
    string api = 2; // The single string literal base URL for API calls or an associative array of separate URLs for private and public APIs.
    string doc = 3; // A single string URL link to original documentation for exchange API on their website or an array of links to docs.
}

message RequiredCredentials {
    bool api_key = 1;
    bool secret = 2;
    bool uid = 3;
    bool login = 4;
    bool password = 5;
}

message APICredentials {
    string api_key = 1;
    string secret = 2;
    string uid = 3;
    string login = 4;
    string password = 5;
}

message AddExchangeRequest {
    string id = 1; // The identifier for the exchange
    APICredentials api_credentials = 3; // The API credentials, if you wish to perform authenticated requests
}

message AddExchangeResponse {
    uint32 handle = 1;
    bool authenticated = 2;
}

message SimpleExchangeRequest {
    uint32 handle = 1;
}

message getTradePairsRequest {
    uint32 handle = 1;
    bool reload = 2;
}

message ProductPrecision {
    uint32 price = 1; // precision for price quotes
    uint32 amount = 2; // precision for size quotes
    uint32 cost = 3; // precision for value quotes
}

message TradeLimit {
    double min = 1;
    double max = 2;
}

message TradePairInfo {
    string symbol = 1; // uppercase string literal of a pair of currencies [BTC/USD]
    string id = 2; // string literal for referencing within an exchange
    string base = 3; // uppercase string, base currency, 3 or more letters
    string quote = 4; // uppercase string, quote currency, 3 or more letters
    bool active = 5; // boolean, market status
    ProductPrecision precision = 6; // number of decimal digits "after the dot"
    double lot = 7; // order amount should be a multiple of lot
    TradeLimit size_limit = 8; // Limits on order sizes
    TradeLimit price_limit = 9; // Limits on prices in orders
    TradeLimit value_limit = 10; // Limits on order value (size * price)
    string info = 11; // JSON string of the original unparsed market info from the exchange
}

message getTickerRequest {
    uint32 handle = 1; // the id for the exchange to query
    string symbol = 2; // the ticker symbol [BTC/USD]
}

message Ticker {
    string symbol = 1; // Trade pair symbol
    int64 timestamp = 2; // unix epoch
    string datetime = 3; // ISO8601 datetime string with milliseconds
    double high = 4; // highest price
    double low = 5; // lowest price
    double bid = 6; // current bid (buy) price
    double ask = 7; // current ask (sell) price
    double vwap = 8; // volume weighed average price
    double open = 9; // open price
    double close = 10; // closing price
    double first = 11; // price of first trade
    double last = 12; // price of last trade
    double change = 13; // change in price in quote terms
    double percentage = 14; // percentage price change
    double average = 15; // average price (also see vwap)
    double base_volume = 16; // volume of base currency
    double quote_volume = 17; // volume of quote currency
    string info = 18; // original stringified JSON object of exchange response
}
